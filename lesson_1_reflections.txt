--------------------------------------------------------------------------------------------------------------------------
Q: How did viewing a diff between two version of a file help yo see the bug that was introduced ?

Because usually the new code is the gilty of the bad behaviour of the app.

--------------------------------------------------------------------------------------------------------------------------
Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term ?

Specially when there are a lot of people working in a single file, you are not aware of the changes maded by other persons and the version control can help you to see you made what changes.

--------------------------------------------------------------------------------------------------------------------------
Q:What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

** manually

advantages
	you have the control
	you can add a message that indicates the logic to update that piece of code

disadvantages
	you dont have the control
	you can't add a message to a commit since you cant control and the diferences wont have a logical meaning

* automatically
advantages
disadvantages

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?


because a commit is a logical thing and could involve many files



--------------------------------------------------------------------------------------------------------------------------
Q: How can you use the commands git log and git diff to view the history of files?

git log gives us the commits ids and git diff gives us the diferrence so un multiple uses it would be


--------------------------------------------------------------------------------------------------------------------------
q: How might using version control make you more confident to make changes that could break something?

Because I can go back to the previous change.



--------------------------------------------------------------------------------------------------------------------------
Q: Now that you have your workspace set up, what do you want to try using Git for?

For making a new project !!
For makint fun stuf only for me

Git tracks files in the same repository together so that making a change that affects multiple files can be saved as a single commit. If you saved a commit where multiple files, or every file, had changed, what would happen if you checked out the previous commit?





Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

Save a commit (call this commit 1).
Update some files and save another commit (call this commit 2).
Change all the files back to their state during commit 1, then save again (call this commit 3).
This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 


Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 


After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.

